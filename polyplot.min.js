/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = new Promise((resolve, ignore) => {
    if ("geolocation" in navigator) {
        navigator.geolocation.getCurrentPosition(pos => {
            resolve({lat: pos.coords.latitude, lng: pos.coords.longitude});
        }, () => {
            resolve(null);
            console.error('CURRENT_LOCATION: Not permitted access to location');
        });
    } else {
        resolve(null);
        console.error('CURRENT_LOCATION: Unsupported in current browser');
    }
});


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = function(mapsSDK, mapElement, coords) {
    const map = new mapsSDK.Map(mapElement, {
        center: coords || {lat: -34.397, lng: 150.644},
        zoom: 10
    });
    const places = new mapsSDK.places.PlacesService(map);

    return {
        userMarker: null,
        getMap() {
            return map;
        },
        addUserMarker(coords) {
            if (this.userMarker) {
                this.userMarker.setMap(null);
            }
            this.userMarker = new mapsSDK.Marker({
                icon: {
                    path: mapsSDK.SymbolPath.CIRCLE,
                    fillColor: 'powderblue',
                    fillOpacity: 1,
                    strokeColor: 'dodgerblue',
                    strokeWeight: 2,
                    scale: 5
                },
                map: map,
                position: coords
            });
        },
        addPlaceMarker(coords, color) {
            return new mapsSDK.Marker({
                icon: {
                    path: mapsSDK.SymbolPath.BACKWARD_CLOSED_ARROW,
                    fillColor: 'darken(red, 30%)',
                    fillOpacity: 0.7,
                    strokeColor: color,
                    strokeWeight: 2,
                    scale: 3
                },
                map: map,
                position: coords
            });
        },
        searchForPlace(keyword) {
            return new Promise((resolve, reject) => {
                places.nearbySearch({
                    bounds: map.getBounds(),
                    keyword: keyword
                }, (results, status) => {
                    if (status === mapsSDK.places.PlacesServiceStatus.OK) {
                        resolve(results);
                    } else {
                        reject(status);
                    }
                });
            });
        }
    };
};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

const app = __webpack_require__(3);
window['googleMapsOnReady'] = app.init;
window['searchPlaces'] = app.search;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

const currentLocation = __webpack_require__(0);
const mapFactory = __webpack_require__(1);

module.exports = {
    init() {
        currentLocation
            .then(coords => {
                this.map = mapFactory(google.maps, document.querySelector('.map'), coords);
                if (coords) {
                    this.map.addUserMarker(coords);
                }
            });
    },
    search() {
        this.map.searchForPlace(document.querySelectorAll('.search__input')[0].value)
            .then(results => results.map(r => this.map.addPlaceMarker(r.geometry.location, 'crimson')))
            .catch(err => console.error('Something went amiss', err));
        return false;
    }
};


/***/ })
/******/ ]);