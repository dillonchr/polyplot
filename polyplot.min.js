/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = new Promise((resolve, ignore) => {
    if ("geolocation" in navigator) {
        navigator.geolocation.getCurrentPosition(pos => {
            resolve({lat: pos.coords.latitude, lng: pos.coords.longitude});
        }, () => {
            resolve(null);
            console.error('CURRENT_LOCATION: Not permitted access to location');
        });
    } else {
        resolve(null);
        console.error('CURRENT_LOCATION: Unsupported in current browser');
    }
});


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

const currentLocation = __webpack_require__(0);
let map;

window['googleMapsOnReady'] = function () {

    const app = {
        createMap(coords) {
            return new google.maps.Map(document.querySelector('.map'), {
                center: coords || {lat: -34.397, lng: 150.644},
                zoom: 10
            });
        }
    };


    currentLocation
        .then(coords => {
            map = app.createMap(coords);
            let marker = new google.maps.Marker({
                position: coords,
                map: map
            });
        });
};

window['searchPlaces'] = function (form) {
    let service = new google.maps.places.PlacesService(map);
    service.nearbySearch({
        bounds: map.getBounds(),
        keyword: form.querySelectorAll('.search__input').value
    }, (results, status) => {
        if (status === google.maps.places.PlacesServiceStatus.OK) {
            console.log(results);
        } else {
            console.error('failed', results, status);
        }
    });
    return false;
};


/***/ })
/******/ ]);